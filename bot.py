import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, \
    MessageHandler, filters
from telegram.error import BadRequest, Forbidden
import sqlite3
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_vars = [
    'TELEGRAM_BOT_TOKEN', 
    'CHANNEL_ID', 
    'ADMIN_CHAT_ID',
    'CARD_NUMBER',
    'CARD_HOLDER'
]

missing_vars = [var for var in required_vars if not os.getenv(var)]

if missing_vars:
    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
    logger.error("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway Settings ‚Üí Variables")
    exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CARD_NUMBER = os.getenv('CARD_NUMBER')
CARD_HOLDER = os.getenv('CARD_HOLDER')
SUBSCRIPTION_PRICE = os.getenv('SUBSCRIPTION_PRICE', '1000')

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
WELCOME_IMAGE_URL = os.getenv('WELCOME_IMAGE_URL', "https://raw.githubusercontent.com/DariaBurd/mindwomen-bot/main/images/welcome.png")

class SubscriptionBot:
    def __init__(self, token):
        if not token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)

        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        self.setup_database()

    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscription_end DATE,
                joined_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS pending_payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount INTEGER DEFAULT 1000,
                screenshot_sent BOOLEAN DEFAULT FALSE,
                created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending'
            )
        ''')
        self.conn.commit()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("my_subscription", self.my_subscription))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_screenshot))
        self.application.add_error_handler(self.error_handler)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user = update.effective_user

        welcome_text = """
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è!*

*–ß—Ç–æ –Ω–∞–º –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤–∞–∂–Ω–æ* - —ç—Ç–æ –Ω–µ –±–æ—è—Ç—å—Å—è –±—ã—Ç—å —Å–∞–º–æ–π —Å–æ–±–æ–π. –ë—ã—Ç—å —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω. –í—Å–µ –º—ã - —Å–µ—Å—Ç—Ä—ã –∏ –æ—Ç—Ä–∞–∂–∞—è—Å—å –≤ –≥–ª–∞–∑–∞—Ö —Å–µ—Å—Ç—Ä—ã –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ—Ç—å —Å–µ–±—è –æ—á–µ–Ω—å —è—Å–Ω–æ.

*–ó–∞–∫—Ä—ã—Ç—ã–π –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–π –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏* - —ç—Ç–æ —Ç–≤–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª–µ, –≥–¥–µ –º—ã –≤–º–µ—Å—Ç–µ –±—É–¥–µ–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å, –æ–±—â–∞—Ç—å—Å—è, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—â–µ–µ –∂–µ–Ω—Å–∫–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–∏ –≤ –º–æ–º–µ–Ω—Ç–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å. 

*–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.* üå∏
        """

        try:
            await update.message.reply_photo(
                photo=WELCOME_IMAGE_URL,
                caption=welcome_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await update.message.reply_text(welcome_text, parse_mode='Markdown')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_end = self.get_user_subscription(user.id)
        if not subscription_end or subscription_end <= datetime.now():
            await self.offer_payment(update, user)
        else:
            await self.send_welcome_message(update, user, subscription_end)

    async def send_welcome_message(self, update: Update, user, subscription_end):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        welcome_text = f"""
üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MindWomen, –ö–æ—Ä–æ–ª–µ–≤–∞!* üå∏

*–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}

*–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å —Å–µ—Å—Ç—Ä–∞–º–∏
‚Ä¢ –ú–æ–µ –±–µ—Ä–µ–∂–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ñ–∏–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy

*–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* /my_subscription

*–ú—ã —Ä–∞–¥—ã —Ç–µ–±–µ!* üíñ
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def offer_payment(self, update: Update, user):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        keyboard = [[InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - {SUBSCRIPTION_PRICE}‚ÇΩ/–º–µ—Å—è—Ü", callback_data="pay_subscription")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = f"""
üí∞ *–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ MindWomen*

*–¢–∞—Ä–∏—Ñ:* {SUBSCRIPTION_PRICE}‚ÇΩ –≤ –º–µ—Å—è—Ü

*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
- –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
- –í—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
- –£—á–∞—Å—Ç–∏–µ –≤ –∂–∏–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã.
        """

        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == "pay_subscription":
            await self.send_payment_details(query)
        elif query.data.startswith('confirm_'):
            payment_id = query.data.replace('confirm_', '')
            await self.confirm_payment(update, context, payment_id)
        elif query.data.startswith('reject_'):
            payment_id = query.data.replace('reject_', '')
            await self.reject_payment(update, context, payment_id)

    async def send_payment_details(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
        user = query.from_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        self.cursor.execute('''
            INSERT INTO pending_payments (user_id, amount) 
            VALUES (?, ?)
        ''', (user.id, SUBSCRIPTION_PRICE))
        self.conn.commit()

        payment_text = f"""
üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ MindWomen*

*–°—É–º–º–∞:* {SUBSCRIPTION_PRICE}‚ÇΩ –≤ –º–µ—Å—è—Ü

*–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*
‚ñ´Ô∏è *–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:* `{CARD_NUMBER}`
‚ñ´Ô∏è *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {CARD_HOLDER}

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {SUBSCRIPTION_PRICE}‚ÇΩ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç

‚úÖ *–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.*
*–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.*
        """

        await query.message.reply_text(payment_text, parse_mode='Markdown')

    async def handle_screenshot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = update.effective_user
        
        if update.message.photo:
            # –ù–∞—Ö–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.cursor.execute('''
                SELECT id FROM pending_payments 
                WHERE user_id = ? AND status = 'pending'
                ORDER BY created_date DESC LIMIT 1
            ''', (user.id,))
            
            result = self.cursor.fetchone()
            
            if result:
                payment_id = result[0]
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                self.cursor.execute('''
                    UPDATE pending_payments SET screenshot_sent = TRUE WHERE id = ?
                ''', (payment_id,))
                self.conn.commit()

                await update.message.reply_text(
                    "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!*\n\n"
                    "–ü–ª–∞—Ç–µ–∂ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
                    "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª.",
                    parse_mode='Markdown'
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self.notify_admin(context.bot, user, payment_id, update.message.photo[-1].file_id)
            else:
                await update.message.reply_text(
                    "‚ùå *–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ–ø–ª–∞—Ç—ã*\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                    parse_mode='Markdown'
                )

    async def notify_admin(self, bot, user, payment_id, screenshot_file_id):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        admin_text = f"""
üîÑ *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name or ''}
*Username:* @{user.username or '–Ω–µ—Ç'}
*ID:* {user.id}
*–°—É–º–º–∞:* {SUBSCRIPTION_PRICE}‚ÇΩ
*–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}

*–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:*
        """

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"confirm_{payment_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=screenshot_file_id,
                caption=admin_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    async def confirm_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª"""
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        self.cursor.execute('''
            SELECT user_id FROM pending_payments WHERE id = ?
        ''', (payment_id,))
        
        result = self.cursor.fetchone()
        if not result:
            await query.message.reply_text("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id = result[0]

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É (1 –º–µ—Å—è—Ü)
        subscription_end = datetime.now() + timedelta(days=30)
        await self.save_subscription(user_id, subscription_end, context.bot)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º CHANNEL_ID)
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ CHANNEL_ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
            channel_id = self.get_correct_channel_id(CHANNEL_ID)
            
            await context.bot.restrict_chat_member(
                chat_id=channel_id,
                user_id=user_id,
                permissions={
                    'can_send_messages': True,
                    'can_send_media_messages': True,
                    'can_send_polls': True,
                    'can_send_other_messages': True,
                    'can_add_web_page_previews': True,
                    'can_change_info': False,
                    'can_invite_users': False,
                    'can_pin_messages': False
                }
            )
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
            
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.error(f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CHANNEL_ID}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"""
üéâ *–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MindWomen –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {subscription_end.strftime('%d.%m.%Y')}

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ª—É–±! üíñ
                """,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        self.cursor.execute('''
            UPDATE pending_payments SET status = 'confirmed' WHERE id = ?
        ''', (payment_id,))
        self.conn.commit()

        await query.edit_message_caption(caption="‚úÖ *–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")

    def get_correct_channel_id(self, channel_id):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è Telegram API"""
        # –ï—Å–ª–∏ —ç—Ç–æ username (@channel), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(channel_id, str) and channel_id.startswith('@'):
            return channel_id
        
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        try:
            channel_id_int = int(channel_id)
            # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100
            if channel_id_int < 0 and not str(channel_id_int).startswith('-100'):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç -100 + –∏—Å—Ö–æ–¥–Ω—ã–π ID
                return f"-100{abs(channel_id_int)}"
            return channel_id_int
        except ValueError:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ username)
            return channel_id

    async def save_subscription(self, user_id, subscription_end, bot):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ë–î (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ await
            user_chat = await bot.get_chat(user_id)
            
            self.cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, subscription_end)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user_id, 
                user_chat.username, 
                user_chat.first_name, 
                user_chat.last_name, 
                subscription_end
            ))
            self.conn.commit()
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã ID
            self.cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, subscription_end)
                VALUES (?, ?)
            ''', (user_id, subscription_end))
            self.conn.commit()

    async def reject_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        query = update.callback_query
        await query.answer()

        self.cursor.execute('''
            SELECT user_id FROM pending_payments WHERE id = ?
        ''', (payment_id,))
        
        result = self.cursor.fetchone()
        if result:
            user_id = result[0]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        self.cursor.execute('''
            UPDATE pending_payments SET status = 'rejected' WHERE id = ?
        ''', (payment_id,))
        self.conn.commit()

        await query.edit_message_caption(caption="‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω*")

    def get_user_subscription(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.cursor.execute(
                'SELECT subscription_end FROM users WHERE user_id = ?',
                (user_id,)
            )
            result = self.cursor.fetchone()
            if result and result[0]:
                return datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None

    async def my_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        subscription_end = self.get_user_subscription(user.id)

        if subscription_end and subscription_end > datetime.now():
            text = f"""
‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*

*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}
*–û—Å—Ç–∞–ª–æ—Å—å:* {(subscription_end - datetime.now()).days} –¥–Ω–µ–π

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy
            """
        else:
            text = """
‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É MindWomen –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–ø–ª–∞—Ç—ã.
            """

        await update.message.reply_text(text, parse_mode='Markdown')

    async def check_subscriptions(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ—Ö, —É –∫–æ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"""
        now = datetime.now()

        try:
            self.cursor.execute(
                'SELECT user_id FROM users WHERE subscription_end < ?',
                (now.strftime('%Y-%m-%d %H:%M:%S'),)
            )
            expired_users = self.cursor.fetchall()

            for user_id, in expired_users:
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                    channel_id = self.get_correct_channel_id(CHANNEL_ID)
                    await context.bot.ban_chat_member(chat_id=channel_id, user_id=user_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start",
                            parse_mode='Markdown'
                        )
                    except:
                        pass

                    logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.application.run_polling()

if __name__ == "__main__":
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)

    try:
        bot = SubscriptionBot(BOT_TOKEN)
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        exit(1)


