import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, PreCheckoutQueryHandler, \
    MessageHandler, filters
from telegram.error import BadRequest, Forbidden
from yandex_checkout import Configuration, Payment
import sqlite3
import uuid
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

required_vars = [
    'TELEGRAM_BOT_TOKEN',
    'YUKASSA_SHOP_ID',
    'YUKASSA_SECRET_KEY',
    'YUKASSA_PROVIDER_TOKEN',
    'CHANNEL_ID',
    'ADMIN_CHAT_ID'
]

missing_vars = []
for var in required_vars:
    if not os.getenv(var):
        missing_vars.append(var)

if missing_vars:
    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
    logger.error("–ü—Ä–æ–≤–µ—Ä—å Railway Settings ‚Üí Variables")
    exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
Configuration.account_id = os.getenv('YUKASSA_SHOP_ID')
Configuration.secret_key = os.getenv('YUKASSA_SECRET_KEY')

# ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –î–æ–±–∞–≤–∏–ª–∞ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
WELCOME_IMAGE_URL = "https://raw.githubusercontent.com/DariaBurd/mindwomen-bot/main/images/welcome.png"


class SubscriptionBot:
    def __init__(self, token):

        if not token or token == "your_bot_token_here":
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å Railway Variables ‚Üí TELEGRAM_BOT_TOKEN")
            exit(1)

        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        self.setup_database()
        self.setup_tasks()
        self.application.add_error_handler(self.error_handler)

    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscription_end DATE,
                joined_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()

    def setup_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # self.application.job_queue.run_repeating(
        #     self.check_subscriptions,
        #     interval=3600,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        #     first=10
        # )
        pass

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("my_subscription", self.my_subscription))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(PreCheckoutQueryHandler(self.precheckout))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}", exc_info=context.error)

        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
        user = update.effective_user

        # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        welcome_text = """
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è!*

*–ß—Ç–æ –Ω–∞–º –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤–∞–∂–Ω–æ* - —ç—Ç–æ –Ω–µ –±–æ—è—Ç—å—Å—è –±—ã—Ç—å —Å–∞–º–æ–π —Å–æ–±–æ–π. –ë—ã—Ç—å —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω. –í—Å–µ –º—ã - —Å–µ—Å—Ç—Ä—ã –∏ –æ—Ç—Ä–∞–∂–∞—è—Å—å –≤ –≥–ª–∞–∑–∞—Ö —Å–µ—Å—Ç—Ä—ã –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ—Ç—å —Å–µ–±—è –æ—á–µ–Ω—å —è—Å–Ω–æ.

*–ó–∞–∫—Ä—ã—Ç—ã–π –ö–ª—É–± –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–π –ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏* - —ç—Ç–æ —Ç–≤–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª–µ, –≥–¥–µ –º—ã –≤–º–µ—Å—Ç–µ –±—É–¥–µ–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å, –æ–±—â–∞—Ç—å—Å—è, —Å–æ–∑–¥–∞–≤–∞—è –æ–±—â–µ–µ –∂–µ–Ω—Å–∫–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–∏ –≤ –º–æ–º–µ–Ω—Ç–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å. 

*–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.* üå∏
        """

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        try:
            await update.message.reply_photo(
                photo=WELCOME_IMAGE_URL,
                caption=welcome_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await update.message.reply_text(
                welcome_text,
                parse_mode='Markdown'
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_end = self.get_user_subscription(user.id)
        if not subscription_end or subscription_end <= datetime.now():
            await self.offer_payment(update, user)
        else:
            await self.send_welcome_message(update, user, subscription_end)

    async def send_welcome_message(self, update: Update, user, subscription_end):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        welcome_text = f"""
üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MindWomen, –ö–æ—Ä–æ–ª–µ–≤–∞!* üå∏

*–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}

*–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å —Å–µ—Å—Ç—Ä–∞–º–∏
‚Ä¢ –ú–æ–µ –±–µ—Ä–µ–∂–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ñ–∏–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy

*–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* /my_subscription

*–ú—ã —Ä–∞–¥—ã —Ç–µ–±–µ!* üíñ
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def offer_payment(self, update: Update, user):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –ú–µ—Å—è—Ü - 888‚ÇΩ", callback_data="sub_month"),
                InlineKeyboardButton("üíé 3 –º–µ—Å—è—Ü–∞ - 2500‚ÇΩ", callback_data="sub_3months"),
            ],
            [
                InlineKeyboardButton("üëë –ì–æ–¥ - 10100‚ÇΩ", callback_data="sub_year"),
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        text = """
üí∞ *–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ MindWomen*

*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*
‚Ä¢ *–ú–µ—Å—è—Ü* - 888‚ÇΩ - –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞
‚Ä¢ *3 –º–µ—Å—è—Ü–∞* - 2500‚ÇΩ  - –ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ
‚Ä¢ *–ì–æ–¥* - 10100‚ÇΩ  - –ü–æ–ª–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ

*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
- –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
- –í—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
- –£—á–∞—Å—Ç–∏–µ –≤ –∂–∏–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –≤ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã
        """

        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith('sub_'):
            period = query.data.replace('sub_', '')
            await self.create_invoice(query, period)

    async def create_invoice(self, query, period):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        # –¶–µ–Ω—ã
        prices = {
            'month': 88800,
            '3months': 250000,
            'year': 1010000
        }

        periods_text = {
            'month': '1 –º–µ—Å—è—Ü',
            '3months': '3 –º–µ—Å—è—Ü–∞',
            'year': '1 –≥–æ–¥'
        }

        amount = prices[period]
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ MindWomen ({periods_text[period]})"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        try:
            await query.message.reply_invoice(
                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MindWomen",
                description=description,
                payload=f"subscription_{period}_{query.from_user.id}",
                provider_token=os.getenv('YUKASSA_PROVIDER_TOKEN'),
                currency="RUB",
                prices=[{"label": description, "amount": amount}],
                need_name=True,
                need_email=True,
                need_phone_number=False,
                send_email_to_provider=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def precheckout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        await query.answer(ok=True)

    async def successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞"""
        payment = update.message.successful_payment
        user = update.effective_user

        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user.id} - {payment.total_amount}‚ÇΩ")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ payload
        payload_parts = payment.invoice_payload.split('_')
        if len(payload_parts) < 3:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payment.invoice_payload}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return

        period = payload_parts[1]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = self.calculate_subscription_end(period)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.save_subscription(user, subscription_end)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º restrict_chat_member –≤–º–µ—Å—Ç–æ unban_chat_member
            await context.bot.restrict_chat_member(
                chat_id=CHANNEL_ID,
                user_id=user.id,
                permissions={
                    'can_send_messages': True,
                    'can_send_media_messages': True,
                    'can_send_polls': True,
                    'can_send_other_messages': True,
                    'can_add_web_page_previews': True,
                    'can_change_info': False,
                    'can_invite_users': False,
                    'can_pin_messages': False
                }
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
            
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CHANNEL_ID}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            elif "user is an administrator" in str(e).lower():
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞")
            elif "user not found" in str(e).lower():
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                
        except Forbidden as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏!* üéâ

*–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*
1. –ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. –ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–±–µ
3. –ò–∑—É—á–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
4. –£—á–∞—Å—Ç–≤—É–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö

*–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:* /my_subscription
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª–∏—Ü—É
        await self.notify_admins(user, payment, subscription_end, context.bot)

    def calculate_subscription_end(self, period):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        now = datetime.now()
        if period == 'month':
            return now + timedelta(days=30)
        elif period == '3months':
            return now + timedelta(days=90)
        elif period == 'year':
            return now + timedelta(days=365)
        return now + timedelta(days=30)

    def save_subscription(self, user, subscription_end):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ë–î"""
        try:
            self.cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, subscription_end)
                VALUES (?, ?, ?, ?, ?)
            ''', (user.id, user.username, user.first_name, user.last_name, subscription_end))
            self.conn.commit()
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

    def get_user_subscription(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.cursor.execute(
                'SELECT subscription_end FROM users WHERE user_id = ?',
                (user_id,)
            )
            result = self.cursor.fetchone()
            if result and result[0]:
                return datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return None

    async def check_subscriptions(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ—Ö, —É –∫–æ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"""
        now = datetime.now()

        try:
            self.cursor.execute(
                'SELECT user_id FROM users WHERE subscription_end < ?',
                (now.strftime('%Y-%m-%d %H:%M:%S'),)
            )
            expired_users = self.cursor.fetchall()

            for user_id, in expired_users:
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                    await context.bot.ban_chat_member(
                        chat_id=CHANNEL_ID,
                        user_id=user_id
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MindWomen –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å*\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /start",
                            parse_mode='Markdown'
                        )
                    except:
                        pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

                    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    self.cursor.execute(
                        'DELETE FROM users WHERE user_id = ?',
                        (user_id,)
                    )
                    self.conn.commit()

                    logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    async def my_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        subscription_end = self.get_user_subscription(user.id)

        if subscription_end and subscription_end > datetime.now():
            text = f"""
‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*

*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}
*–û—Å—Ç–∞–ª–æ—Å—å:* {(subscription_end - datetime.now()).days} –¥–Ω–µ–π

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* https://t.me/+Yx9m02RdviBmNjAy
            """
        else:
            text = """
‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É MindWomen –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –æ–ø–ª–∞—Ç—ã.
            """

        await update.message.reply_text(text, parse_mode='Markdown')

    async def notify_admins(self, user, payment, subscription_end, bot):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª–∏—Ü—É –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        admin_text = f"""
üëë *–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ MindWomen*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name or ''}
*Username:* @{user.username or '–Ω–µ—Ç'}
*ID:* {user.id}
*–¢–∞—Ä–∏—Ñ:* {payment.total_amount / 100}‚ÇΩ
*–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}
*–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª–∏—Ü–µ
        try:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_CHAT_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.application.run_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤ Railway Variables –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
        print("TELEGRAM_BOT_TOKEN=—Ç–æ–∫–µ–Ω_—Ç–≤–æ–µ–≥–æ_–±–æ—Ç–∞")
        exit(1)

    try:
        bot = SubscriptionBot(BOT_TOKEN)
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        exit(1)
