import os
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, PreCheckoutQueryHandler, \
    MessageHandler, filters
from telegram.error import BadRequest
from yandex_checkout import Configuration, Payment
import sqlite3
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
Configuration.account_id = os.getenv('YUKASSA_SHOP_ID')
Configuration.secret_key = os.getenv('YUKASSA_SECRET_KEY')

# ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)
CHANNEL_ID = os.getenv('CHANNEL_ID')  # –ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890


class SubscriptionBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        self.setup_database()
        self.setup_tasks()

    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect('subscriptions.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscription_end DATE,
                joined_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()

    def setup_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        self.application.job_queue.run_repeating(
            self.check_subscriptions,
            interval=3600,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            first=10
        )

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("my_subscription", self.my_subscription))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(PreCheckoutQueryHandler(self.precheckout))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        subscription_end = self.get_user_subscription(user.id)

        if subscription_end and subscription_end > datetime.now():
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            await self.send_welcome_message(update, user, subscription_end)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
            await self.offer_payment(update, user)

    async def send_welcome_message(self, update: Update, user, subscription_end):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        welcome_text = f"""
üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MindWomen, –ö–æ—Ä–æ–ª–µ–≤–∞!* üå∏

*–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}

*–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Å —Å–µ—Å—Ç—Ä–∞–º–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ 24/7
‚Ä¢ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –∂–∏–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* @mindwomen_channel

*–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* /my_subscription

*–ú—ã —Ä–∞–¥—ã —Ç–µ–±–µ!* üíñ
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def offer_payment(self, update: Update, user):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –ú–µ—Å—è—Ü - 555‚ÇΩ", callback_data="sub_month"),
                InlineKeyboardButton("üíé 3 –º–µ—Å—è—Ü–∞ - 1555‚ÇΩ", callback_data="sub_3months"),
            ],
            [
                InlineKeyboardButton("üëë –ì–æ–¥ - 6130‚ÇΩ", callback_data="sub_year"),
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        text = """
üí∞ *–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ MindWomen*

*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*
‚Ä¢ *–ú–µ—Å—è—Ü* - 555‚ÇΩ - –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞
‚Ä¢ *3 –º–µ—Å—è—Ü–∞* - 1555‚ÇΩ  - –ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ
‚Ä¢ *–ì–æ–¥* - 6120‚ÇΩ  - –ü–æ–ª–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ

*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
- –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
- –í—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
- –£—á–∞—Å—Ç–∏–µ –≤ –∂–∏–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö
        """

        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith('sub_'):
            period = query.data.replace('sub_', '')
            await self.create_invoice(query, period)

    async def create_invoice(self, query, period):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        prices = {
            'month': 555,
            '3months': 1555,
            'year': 6130
        }

        periods_text = {
            'month': '1 –º–µ—Å—è—Ü',
            '3months': '3 –º–µ—Å—è—Ü–∞',
            'year': '1 –≥–æ–¥'
        }

        amount = prices[period]
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ MindWomen ({periods_text[period]})"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        await query.message.reply_invoice(
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MindWomen",
            description=description,
            payload=f"subscription_{period}_{query.from_user.id}",
            provider_token=os.getenv('YUKASSA_PROVIDER_TOKEN'),
            currency="RUB",
            prices=[{"label": description, "amount": amount}],
            need_name=True,
            need_email=True,
            need_phone_number=False,
            send_email_to_provider=True
        )

    async def precheckout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query
        await query.answer(ok=True)

    async def successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞"""
        payment = update.message.successful_payment
        user = update.effective_user

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ payload
        payload_parts = payment.invoice_payload.split('_')
        period = payload_parts[1]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = self.calculate_subscription_end(period)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.save_subscription(user, subscription_end)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
        try:
            await self.application.bot.restrict_chat_member(
                chat_id=CHANNEL_ID,
                user_id=user.id,
                permissions={
                    'can_send_messages': True,
                    'can_send_media_messages': True,
                    'can_send_polls': True,
                    'can_send_other_messages': True,
                    'can_add_web_page_previews': True,
                    'can_change_info': False,
                    'can_invite_users': False,
                    'can_pin_messages': False
                }
            )
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏!* üéâ

*–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:* @mindwomen_channel

*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*
1. –ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. –ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ–±–µ
3. –ò–∑—É—á–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
4. –£—á–∞—Å—Ç–≤—É–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö

*–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ –∫—É—Ä–∞—Ç–æ—Ä–∞–º!* üíñ

*–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:* /my_subscription
        """

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await self.notify_admins(user, payment, subscription_end)

    def calculate_subscription_end(self, period):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        now = datetime.now()
        if period == 'month':
            return now + timedelta(days=30)
        elif period == '3months':
            return now + timedelta(days=90)
        elif period == 'year':
            return now + timedelta(days=365)
        return now + timedelta(days=30)

    def save_subscription(self, user, subscription_end):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ë–î"""
        self.cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, subscription_end)
            VALUES (?, ?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name, subscription_end))
        self.conn.commit()

    def get_user_subscription(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.cursor.execute(
            'SELECT subscription_end FROM users WHERE user_id = ?',
            (user_id,)
        )
        result = self.cursor.fetchone()
        if result and result[0]:
            return datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        return None

    async def check_subscriptions(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ—Ö, —É –∫–æ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"""
        now = datetime.now()

        self.cursor.execute(
            'SELECT user_id FROM users WHERE subscription_end < ?',
            (now.strftime('%Y-%m-%d %H:%M:%S'),)
        )
        expired_users = self.cursor.fetchall()

        for user_id, in expired_users:
            try:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                await context.bot.ban_chat_member(
                    chat_id=CHANNEL_ID,
                    user_id=user_id
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MindWomen –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å*\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /start",
                        parse_mode='Markdown'
                    )
                except:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

                # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                self.cursor.execute(
                    'DELETE FROM users WHERE user_id = ?',
                    (user_id,)
                )
                self.conn.commit()

                logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def my_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        subscription_end = self.get_user_subscription(user.id)

        if subscription_end and subscription_end > datetime.now():
            text = f"""
‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*

*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {subscription_end.strftime('%d.%m.%Y %H:%M')}
*–û—Å—Ç–∞–ª–æ—Å—å:* {(subscription_end - datetime.now()).days} –¥–Ω–µ–π

*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* @mindwomen_channel
            """
        else:
            text = """
‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É MindWomen –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –æ–ø–ª–∞—Ç—ã.
            """

        await update.message.reply_text(text, parse_mode='Markdown')

    async def notify_admins(self, user, payment, subscription_end):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        admin_text = f"""
üëë *–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ MindWomen*

*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name or ''}
*Username:* @{user.username}
*ID:* {user.id}
*–¢–∞—Ä–∏—Ñ:* {payment.total_amount / 100}‚ÇΩ
*–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:* {subscription_end.strftime('%d.%m.%Y')}
*–í—Ä–µ–º—è:* {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤)
        # await context.bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    bot = SubscriptionBot(BOT_TOKEN)
    bot.run()